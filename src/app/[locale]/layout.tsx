/**
 * Proprietary and Confidential
 * Copyright (c) 2024 Meet ai LLC. All rights reserved.
 *
 * This software and its documentation are the exclusive property of
 * Meet ai LLC. No part of this software may be reproduced,
 * distributed, or transmitted in any form or by any means without
 * the prior written permission of Meet ai LLC.
 */
import type { Metadata } from 'next';
import localFont from 'next/font/local';
import './globals.css';
import '@styles/bg.css';
import '@styles/general.css';
import { ThemeProvider } from '@ai/components/theme-provider';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { routing } from '@ai/i18n/routing';
import { Toaster } from "@ui/toaster"
import ContextProvider from '@ai/providers/context-provider';

const fleurDeLeachRegular = localFont({
    src: './fonts/FleurDeLeah-Regular.ttf',
    variable: '--font-fleur-sans',
    weight: '400',
});

const kleeOneRegular = localFont({
    src: './fonts/KleeOne-Regular.ttf',
    variable: '--font-kleeone-regular',
    weight: '400',
});

const kleeOneSemiBold = localFont({
    src: './fonts/KleeOne-SemiBold.ttf',
    variable: '--font-kleeone-semi-bold',
    weight: '600',
});

export const metadata: Metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
};

export default async function RootLayout(
    props: Readonly<{
        children: React.ReactNode;
        params: Promise<{ locale: string }>;
    }>,
) {
    const params = await props.params;
    const messages = await getMessages();
    const { locale } = params;
    const { children } = props;

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (!routing.locales.includes(locale as any)) {
        notFound();
    }

    return (
        <html lang={locale} suppressHydrationWarning>
            <body
                className={`${kleeOneRegular.variable} ${kleeOneSemiBold.variable} ${fleurDeLeachRegular.variable} antialiased`}
            >
                <ContextProvider>
                    <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
                        <NextIntlClientProvider messages={messages}>{children}</NextIntlClientProvider>
                        <Toaster />
                    </ThemeProvider>
                </ContextProvider>
            </body>
        </html>
    );
}
